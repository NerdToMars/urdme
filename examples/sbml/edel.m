function umod = edel(umod)
%%
% Edelstein1996_EPSP_AChEvent.m
% This is an autogenerated model file, generated by sbml2rdme with intended use for
% URDME 1.2 or later using Comsol mutliphysics 4.2 or later.
% Please be sure to validate the generated code, especially if sbml2rdme produced any warnings.
%
% After this file has been run the following fields must be assigned in the fem.urdme structure
% for the urdme core to function. Some are assigned by mod2rdme and the rest are assigned by
% this file. You are free to alter any preassigned Matrixes if your model requires it but do so
% only if you know what you are doing.
%
% fem.urdme.D - Diffusion Matrix*
% fem.urdme.N - Stoichiometry Matrix
% fem.urdme.G - Dependancy Matrix
% fem.urdme.u0 - Initial Concentrations Vector
% fem.urdme.sd - Sub Domain Divison Vector*
% fem.urdme.tspan - Time Vector
% fem.urdme.data - Data Vector
% fem.urdme.vol - Voxel Volume Vector*
% * neccessary but assigned elsewhere (mod2rdme)
%%


% DIMENSIONS
Mspecies = 12;
Nreactions = 17;
Ndomains = 1;
Ncells = umod.Ncells;
Ndofs = Mspecies*Ncells;
species_order = {'BasalACh2','IntermediateACh','ActiveACh','Active','BasalACh','Basal','DesensitisedACh2','Desensitised','IntermediateACh2','DesensitisedACh','Intermediate','ActiveACh2'};
reactions_order = {'React0','React1','React2','React3','React4','React5','React6','React7','React8','React9','React10','React11','React12','React13','React14','React15','React16'};
domains_order = {'comp1'};

% There is a risk that our species' order does not match the one given in Comsol.
perm = [1:Mspecies];
%if isfield(fem.urdme, 'species')
%  [foo,perm] = ismember(species_order, fem.urdme.species);
%end

% STOICHIOMETRY MATRIX
% Using vector format
% st_i is a vector of species referenses (rows)
% st_j is a vector of reaction referenses (columns)
% st_s is a vector of stoichiometries (values)

st_i = [1,1,2,2,2,2,3,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11,12,12,12];
st_j = [2,3,8,9,11,16,4,5,7,11,4,6,10,1,2,7,1,6,14,17,13,15,9,12,17,13,14,16,8,10,15,3,5,12];
st_s = [1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,-1,-1,1,1,-1,1,1,1,-1,1,-1,1,-1,1,-1,1,1,-1];
st_i = perm(st_i); % permute the species references to match the comsol model.
umod.N = sparse(st_i, st_j, st_s);

% DEPENDENCY MATRIX
% Using vector format:
% de_i is a vector of reaction referenses (rows)
% de_j is a vector of both species and reaction referenses (columns)
%   The first Mspecies (12) columns tells which propensities
%   needs to be updated when the amount of a species changes.
%   The following Nreactions (17) columns does the same thing
%   but for reaction events.

de_j = [1,1,2,2,2,2,3,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11,12,12,12];
de_j = perm(de_j); 
de_i = [2,3,8,9,11,16,4,5,7,11,4,6,10,1,2,7,1,6,14,17,13,15,9,12,17,13,14,16,8,10,15,3,5,12,1,2,6,7,1,2,3,7,2,3,5,12,4,5,6,7,10,11,3,4,5,7,11,12,1,4,6,10,1,2,4,5,7,11,8,9,10,11,15,16,8,9,11,12,16,17,4,6,8,10,15,4,5,7,8,9,11,16,3,5,9,12,17,13,14,15,16,13,14,16,17,8,10,13,15,8,9,11,13,14,16,9,12,14,17];
de_j = [de_j,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,28,28,29,29,29,29];
umod.G = sparse(de_i, de_j, 1);

% INITIAL VALUES
% Ndomains x Mspecies with initial values
% init_values is a #domains x #species matrix with the initial
% distribution of species per compartment. Default value is zero.
init_values = [0;
               0;
               0;
               0;
               0;
               100;
               0;
               0;
               0;
               0;
               0;
               0;
               ]';

% The following snippet will generate a randomized distribution of the initial values,
% scattered evenly (standard uniform distribution) over the voxels of 
% given compartment with account taken for the voxel volume.
%
% If you want some other initial distribution, please replace the code
% below.

u0 = zeros(Mspecies,Ncells);

for sd = 1:1
    voxels = find(umod.sd == sd);
    vol_sum = [0; cumsum(umod.vol(voxels))];
    for spec = 1:Mspecies
        rnd = vol_sum(end)*rand(1,init_values(sd,spec));
        cnt = histc(rnd,vol_sum);
        u0(spec,voxels) = cnt(1:end-1);
    end
end
umod.u0 = u0;

% DATA ARRAY
% The data array in urdme is a collection of evaluated expressions used to send
% data into the propensity functions. When using sbml2rdme any parameter that does not
% have a set value is expected to be evaluated and put in the data array. The order, index
% of the array is very important as they are matched with the propensity functions in
% Edelstein1996_EPSP_AChEvent.c

% In the given sbml model there are no such expressions defined. So we leave it as an empty vektor.

umod.data = zeros(0,Ncells);

% TIME INTERVAL
% The number of time steps and their sizes that urdme will use for evaluation is not a feature present in
% SBML lvl 2 so it is here set at a default value of 1:10 (1 to 10). Simply alter the tspan vektor for other
% settings.

umod.tspan = [1:10];
