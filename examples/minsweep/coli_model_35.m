function fem = coli_model_35(coli2dist,mesh_hauto)
%COLI_MODEL Generate Comsol model for a separating E. coli geometry.
%   FEM = COLI_MODEL(COLI2DIST,MESH_HAUTO) uses Comsol to generate a
%   FEM-struct FEM which is a model of two E. colis in separation. The
%   distance is controlled by input COLI2DIST which is the distance of
%   separation between the two bacteria. An optional input MESH_HAUTO
%   governs the mesh resolution.

% S. Engblom and A. Hellander 2011-06-01
% Initially generated by COMSOL 3.5a (see file examples/mincde/coli.mph)
% (COMSOL 3.5.0.608, $Date: 2009/05/11 07:38:49 $)

% optional input
if nargin < 2
  mesh_hauto = 5;
end

% check
if abs(coli2dist) > 4.5e-6
  warning('Separation distance is longer than E. coli objects.');
end

% *** file from Comsol with very minor fixes

flclear fem

% COMSOL version
clear vrsn
vrsn.name = 'COMSOL 3.5';
vrsn.ext = 'a';
vrsn.major = 0;
vrsn.build = 608;
vrsn.rcs = '$Name: v35ap $';
vrsn.date = '$Date: 2009/05/11 07:38:49 $';
fem.version = vrsn;

% Geometry
g1=cylinder3('0.5e-6','3.5e-6','pos',{'-1.75e-6','0','0'},'axis',{'1','0','0'},'rot','0');
g2=sphere3('0.5e-6','pos',{'-1.75e-6','0','0'},'axis',{'0','0','1'},'rot','0');
g3=sphere3('0.5e-6','pos',{'1.75e-6','0','0'},'axis',{'0','0','1'},'rot','0');
g4=geomcomp({g1,g2,g3},'ns',{'g1','g2','g3'},'sf','g1+g2+g3','face','none','edge','all');
g5=geomdel(g4);

% create a copy of g5, but moved along the x-axis a distance of coli2dist
% (input)
g6 = move(g5,[coli2dist 0 0]);

% create the union of the two
g7=geomcomp({g5,g6},'ns',{'g5','g6'},'sf','g5+g6','face','none','edge','all');
g8=geomdel(g7);

% Analyzed geometry
clear s
s.objs={g8};
s.name={'CO2'};
s.tags={'g8'};

fem.draw=struct('s',s);
fem.geom=geomcsg(fem);

% Constants
fem.const = {'Dcyt','2.5e-12', ...
  'Dmem','1e-14'};

% Initialize mesh
fem.mesh=meshinit(fem, ...
                  'hauto',mesh_hauto);

% (Default values are not included)

% Application mode 1
clear appl
appl.mode.class = 'Diffusion';
appl.dim = {'MinD_c_atp','MinD_m','Min_e','MinDE','MinD_c_adp'};
appl.module = 'CHEM';
appl.gporder = 2;
appl.cporder = 1;
appl.assignsuffix = '_chdi';
clear prop
prop.elemdefault='Lag1';
appl.prop = prop;
clear bnd
bnd.type = {{'N0';'N0';'N0';'N0';'N0'}};
%bnd.ind = [1,1,1,1,1,1,1,1,1,1,1,1]; % original
allbnds = ones(1,geominfo(g8,'out',{'no'},'od',2));
% *** edited; apply weak boundary form to all 2D boundaries
bnd.ind = allbnds;
appl.bnd = bnd;
clear equ
equ.D = {{'Dcyt';0;'Dcyt';0;'Dcyt'}};
equ.ind = [1];
appl.equ = equ;
fem.appl{1} = appl;
fem.frame = {'ref'};
fem.border = 1;
fem.outform = 'general';

% Equation form
fem.form = 'general';
clear units;
units.basesystem = 'SI';
fem.units = units;

% Boundary settings
clear bnd
bnd.dweak = {{0;'MinD_mt*MinD_m_test';0;'MinDEt*MinDE_test'}};
bnd.shape = [1;2;3;4;5];
bnd.weak = {{0;'-Dmem*(MinD_mTx*MinD_mTx_test+MinD_mTy*MinD_mTy_test+MinD_mTz*MinD_mTz_test)'; ...
  0;'-Dmem*(MinDETx*MinDETx_test+MinDETy*MinDETy_test+MinDETz*MinDETz_test)'}};
%bnd.ind = [1,1,1,1,1,1,1,1,1,1,1,1]; % original
% *** edited; apply weak boundary form to all 2D boundaries
bnd.ind = allbnds;
bnd.dim = {'MinD_c_atp','MinD_m','Min_e','MinDE','MinD_c_adp'};
bnd.var = {'ndflux_MinD_c_atp_chdi','nx_chdi*dflux_MinD_c_atp_x_chdi+ny_chdi*dflux_MinD_c_atp_y_chdi+nz_chdi*dflux_MinD_c_atp_z_chdi', ...
  'ndflux_MinD_m_chdi','nx_chdi*dflux_MinD_m_x_chdi+ny_chdi*dflux_MinD_m_y_chdi+nz_chdi*dflux_MinD_m_z_chdi', ...
  'ndflux_Min_e_chdi','nx_chdi*dflux_Min_e_x_chdi+ny_chdi*dflux_Min_e_y_chdi+nz_chdi*dflux_Min_e_z_chdi', ...
  'ndflux_MinDE_chdi','nx_chdi*dflux_MinDE_x_chdi+ny_chdi*dflux_MinDE_y_chdi+nz_chdi*dflux_MinDE_z_chdi', ...
  'ndflux_MinD_c_adp_chdi','nx_chdi*dflux_MinD_c_adp_x_chdi+ny_chdi*dflux_MinD_c_adp_y_chdi+nz_chdi*dflux_MinD_c_adp_z_chdi','d_chdi',1, ...
  'nx_chdi','nx', ...
  'ny_chdi','ny', ...
  'nz_chdi','nz', ...
  'N_MinD_c_atp_chdi',0, ...
  'kc_MinD_c_atp_chdi',0, ...
  'cb_MinD_c_atp_chdi',0, ...
  'c0_MinD_c_atp_chdi',0, ...
  'Dbnd_MinD_c_atp_chdi',0, ...
  'N_MinD_m_chdi',0, ...
  'kc_MinD_m_chdi',0, ...
  'cb_MinD_m_chdi',0, ...
  'c0_MinD_m_chdi',0, ...
  'Dbnd_MinD_m_chdi',0, ...
  'N_Min_e_chdi',0, ...
  'kc_Min_e_chdi',0, ...
  'cb_Min_e_chdi',0, ...
  'c0_Min_e_chdi',0, ...
  'Dbnd_Min_e_chdi',0, ...
  'N_MinDE_chdi',0, ...
  'kc_MinDE_chdi',0, ...
  'cb_MinDE_chdi',0, ...
  'c0_MinDE_chdi',0, ...
  'Dbnd_MinDE_chdi',0, ...
  'N_MinD_c_adp_chdi',0, ...
  'kc_MinD_c_adp_chdi',0, ...
  'cb_MinD_c_adp_chdi',0, ...
  'c0_MinD_c_adp_chdi',0, ...
  'Dbnd_MinD_c_adp_chdi',0};
fem.bnd = bnd;

% ODE Settings
clear ode
clear units;
units.basesystem = 'SI';
ode.units = units;
fem.ode=ode;

% Multiphysics
fem=multiphysics(fem, ...
  'bdl',[]);

% Extend mesh
fem.xmesh=meshextend(fem);

% Get zero solution
init = asseminit(fem,'init','0','blocksize','auto');

% Update model
fem.sol = init;

% Save current fem structure for restart purposes
fem0=fem;

% Application mode 1
clear appl
appl.mode.class = 'Diffusion';
appl.dim = {'MinD_c_atp','MinD_m','Min_e','MinDE','MinD_c_adp'};
appl.module = 'CHEM';
appl.gporder = 2;
appl.cporder = 1;
appl.assignsuffix = '_chdi';
clear prop
prop.elemdefault='Lag1';
appl.prop = prop;
clear bnd
bnd.type = {{'N0';'N0';'N0';'N0';'N0'}};
%bnd.ind = [1,1,1,1,1,1,1,1,1,1,1,1]; % original
% *** edited; apply weak boundary form to all 2D boundaries
bnd.ind = allbnds;
appl.bnd = bnd;
clear equ
equ.D = {{'Dcyt';0;'Dcyt';0;'Dcyt'}};
equ.ind = [1];
appl.equ = equ;
fem.appl{1} = appl;
fem.frame = {'ref'};
fem.border = 1;
fem.outform = 'general';

% Equation form
fem.form = 'general';
clear units;
units.basesystem = 'SI';
fem.units = units;

% Subdomain settings
clear equ
equ.ind = [1];
equ.dim = {'MinD_c_atp','MinD_m','Min_e','MinDE','MinD_c_adp'};

% Subdomain expressions
equ.expr = {'rdme_sd',1};
fem.equ = equ;

% Boundary settings
clear bnd
bnd.dweak = {{0;'MinD_mt*MinD_m_test';0;'MinDEt*MinDE_test'}};
bnd.shape = [1;2;3;4;5];
bnd.weak = {{0;'-Dmem*(MinD_mTx*MinD_mTx_test+MinD_mTy*MinD_mTy_test+MinD_mTz*MinD_mTz_test)'; ...
  0;'-Dmem*(MinDETx*MinDETx_test+MinDETy*MinDETy_test+MinDETz*MinDETz_test)'}};
%bnd.ind = [1,1,1,1,1,1,1,1,1,1,1,1]; % original
% *** edited; apply weak boundary form to all 2D boundaries
bnd.ind = allbnds;
bnd.var = {'ndflux_MinD_c_atp_chdi','nx_chdi*dflux_MinD_c_atp_x_chdi+ny_chdi*dflux_MinD_c_atp_y_chdi+nz_chdi*dflux_MinD_c_atp_z_chdi', ...
  'ndflux_MinD_m_chdi','nx_chdi*dflux_MinD_m_x_chdi+ny_chdi*dflux_MinD_m_y_chdi+nz_chdi*dflux_MinD_m_z_chdi', ...
  'ndflux_Min_e_chdi','nx_chdi*dflux_Min_e_x_chdi+ny_chdi*dflux_Min_e_y_chdi+nz_chdi*dflux_Min_e_z_chdi', ...
  'ndflux_MinDE_chdi','nx_chdi*dflux_MinDE_x_chdi+ny_chdi*dflux_MinDE_y_chdi+nz_chdi*dflux_MinDE_z_chdi', ...
  'ndflux_MinD_c_adp_chdi','nx_chdi*dflux_MinD_c_adp_x_chdi+ny_chdi*dflux_MinD_c_adp_y_chdi+nz_chdi*dflux_MinD_c_adp_z_chdi','d_chdi',1, ...
  'nx_chdi','nx', ...
  'ny_chdi','ny', ...
  'nz_chdi','nz', ...
  'N_MinD_c_atp_chdi',0, ...
  'kc_MinD_c_atp_chdi',0, ...
  'cb_MinD_c_atp_chdi',0, ...
  'c0_MinD_c_atp_chdi',0, ...
  'Dbnd_MinD_c_atp_chdi',0, ...
  'N_MinD_m_chdi',0, ...
  'kc_MinD_m_chdi',0, ...
  'cb_MinD_m_chdi',0, ...
  'c0_MinD_m_chdi',0, ...
  'Dbnd_MinD_m_chdi',0, ...
  'N_Min_e_chdi',0, ...
  'kc_Min_e_chdi',0, ...
  'cb_Min_e_chdi',0, ...
  'c0_Min_e_chdi',0, ...
  'Dbnd_Min_e_chdi',0, ...
  'N_MinDE_chdi',0, ...
  'kc_MinDE_chdi',0, ...
  'cb_MinDE_chdi',0, ...
  'c0_MinDE_chdi',0, ...
  'Dbnd_MinDE_chdi',0, ...
  'N_MinD_c_adp_chdi',0, ...
  'kc_MinD_c_adp_chdi',0, ...
  'cb_MinD_c_adp_chdi',0, ...
  'c0_MinD_c_adp_chdi',0, ...
  'Dbnd_MinD_c_adp_chdi',0};

% Boundary expressions
bnd.expr = {'rdme_sd',2};
fem.bnd = bnd;

% Global expressions
fem.globalexpr = {'rdme_sdlevel','2'};

% ODE Settings
clear ode
clear units;
units.basesystem = 'SI';
ode.units = units;
fem.ode=ode;

% Multiphysics
fem=multiphysics(fem, ...
  'bdl',[]);

% Extend mesh
fem.xmesh=meshextend(fem);

% Update model
fem.sol = fem0.sol;

% Save current fem structure for restart purposes
fem0=fem;

% *** end output from Comsol
